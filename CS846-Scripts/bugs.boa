####################################################
# bugs.boa
#
# For all projects with over 100 users, pulls
# the files, bugs and commits.
#
# Author: Bryan & Rafi
####################################################

p: Project = input ;
counts := 0 ;
committer_set: set of string ;
successful := 0 ;

numBugFixCommits: output sum[string][string][string] of int ; #OUTPUTS NUM OF COMMITS THAT FIX BUGS
numTotalCommits: output sum[string][string][string] of int ;  #OUTPUTS TOTAL NUM OF COMMITS

numSameIssues := 
  function ( issueString: string, commitMessage : string ) : int {  
    totalFound := 0 ;
    currCommitMessage := commitMessage ;
    foundIndex := strfind( issueString, currCommitMessage ) ;

    while ( true  )
        if ( foundIndex >= 0 && foundIndex + len(issueString) <= len(commitMessage) ) {
            totalFound = totalFound + 1 ;
            currCommitMessage = substring( currCommitMessage, foundIndex + len(issueString) ) ;
            foundIndex = strfind( issueString, currCommitMessage ) ;
        }
        else {
            break ;
        }

    return totalFound ;
};

numIssues := function ( commitMessage : string ) : int {
    numClose := numSameIssues( "close #", commitMessage ) ;
    numCloses := numSameIssues( "closes #", commitMessage ) ;
    numClosed := numSameIssues( "closed #", commitMessage ) ;

    numFix := numSameIssues( "fix #", commitMessage ) ;
    numFixes := numSameIssues( "fixes #", commitMessage ) ;
    numFixed := numSameIssues( "fixed #", commitMessage ) ;

    numResolve := numSameIssues( "resolve #", commitMessage ) ;
    numResolves := numSameIssues( "resolves #", commitMessage ) ;
    numResolved := numSameIssues( "resolved #", commitMessage ) ;

    totalFound := 0 ;

    totalFound = totalFound + numClose + numCloses + numClosed ;
    totalFound = totalFound + numFix + numFixes + numFixed ;
    totalFound = totalFound + numResolve + numResolves + numResolved ;

    return totalFound ;
};

#COUNT UNIQUE NUMBER OF COMMITTERS FOR A PROJECT: counter KEEPS TRACK:
projectSelected := false ;

counter := 0 ;

foreach ( i: int; def(p.code_repositories[i]) )
    foreach ( j: int; def(p.code_repositories[i].revisions[j]) )
        if ( def(p.code_repositories[i].revisions[j].committer) )



            if ( !contains(committer_set, p.code_repositories[i].revisions[j].committer.username ) ) {


##                counts[p.project_url] << 1 ;
                counts++ ;

                add( committer_set, p.code_repositories[i].revisions[j].committer.username ) ;

                counter++ ;

            }#end if



# IF PROJECT HAS 100 OR MORE UNIQUE COMMITTERS, SELECT PROJECT FOR STUDY:
if ( counter >= 100 ) {

##    successful[p.project_url] << counter ;
    successful = counter ;

##    totalSuccessful["projects"] << 1 ;

    projectSelected = true ;

}#end if


######################################

#IF CURRENT PROJECT IS SELECTED : OUTPUT NUM OF COMMITS THAT FIX BUGS:
countCommits := 0 ;


if ( projectSelected ) {

    foreach ( i: int; def(p.code_repositories[i]) )
        foreach ( j: int; def(p.code_repositories[i].revisions[j]) )
#            if ( strfind("closes #", p.code_repositories[i].revisions[j].log) >= 0 )
            if ( isfixingrevision( p.code_repositories[i].revisions[j] ) )  ## numIssues( p.code_repositories[i].revisions[j].log ) > 0 )
            if ( true ) { ## countCommits < 4 ) {
##                commitMessage[p.code_repositories[i].revisions[j].committer.username] << p.code_repositories[i].revisions[j].log ;
                countCommits++ ;

                foreach ( k: int; def(p.code_repositories[i].revisions[j].files[k]) )
                    numBugFixCommits[p.id][p.code_repositories[i].revisions[j].committer.username][p.code_repositories[i].revisions[j].files[k].name] << 1 ;


            }#end if



}#end if






# IF CURRENT PROJECT IS SELECTED: OUTPUT TOTAL NUM OF COMMITS:
countTotalCommits := 0 ;
if ( projectSelected ) {

   foreach ( i: int; def(p.code_repositories[i]) )
        foreach ( j: int; def(p.code_repositories[i].revisions[j]) )
            foreach ( k: int; def(p.code_repositories[i].revisions[j].files[k]) )
                if ( true ) { ##countTotalCommits < 6 ) {
                    numTotalCommits[p.id][p.code_repositories[i].revisions[j].committer.username][p.code_repositories[i].revisions[j].files[k].name] << 1 ;
                    countTotalCommits++ ;
                }#end if




}#end if